apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.release_name }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: "{{ .Values.release_name }}"
  template:
    metadata:
      labels:
        app: "{{ .Values.release_name }}"
    spec:
      initContainers:
        - name: init-copy-files-backoffice
          image: "{{ .Values.images.backoffice.registry }}/{{ .Values.images.backoffice.repository }}:{{ .Values.images.backoffice.tag }}"
          command: ["/bin/sh", "-c"]
          args:
            - |
              pwd
              cp -r ../Resql/backoffice/ /root/DSL/
              
              ls -la /root/DSL/
          volumeMounts:
            - name: resql-volume
              mountPath: /root/DSL/
        - name: init-copy-files-analytics
          image: "{{ .Values.images.analytics.registry }}/{{ .Values.images.analytics.repository }}:{{ .Values.images.analytics.tag }}"
          command: ["/bin/sh", "-c"]
          args:
            - |
              pwd
              cp -r ../Resql/analytics /root/DSL/
              ls -la /root/DSL/
          volumeMounts:
            - name: resql-volume
              mountPath: /root/DSL/
        - name: init-copy-files-training
          image: "{{ .Values.images.training.registry }}/{{ .Values.images.training.repository }}:{{ .Values.images.training.tag }}"
          command: ["/bin/sh", "-c"]
          args:
            - |
              pwd
              cp -r ../Resql/training /root/DSL/
              ls -la /root/DSL/
          volumeMounts:
            - name: resql-volume
              mountPath: /root/DSL/
        - name: init-copy-files-services
          image: "{{ .Values.images.services.registry }}/{{ .Values.images.services.repository }}:{{ .Values.images.services.tag }}"
          command: ["/bin/sh", "-c"]
          args:
            - |
              pwd
              cp -r ../Resql/services /root/DSL/
              ls -la /root/DSL/
          volumeMounts:
            - name: resql-volume
              mountPath: /root/DSL/
      containers:
        - name: "{{ .Values.release_name }}"
          image: "{{ .Values.images.scope.registry }}/{{ .Values.images.scope.repository }}:{{ .Values.images.scope.tag }}"
          env:
            - name: logging.level.root
              value: "{{ .Values.env.LOGGING_LEVEL_ROOT }}"
            - name: SQLMS_DATASOURCES_0_NAME
              value: "{{ .Values.env.SQLMS_DATASOURCES_0_NAME }}"
            - name: SQLMS_DATASOURCES_0_JDBCURL
              value: "{{ .Values.env.SQLMS_DATASOURCES_0_JDBCURL }}"
            - name: SQLMS_DATASOURCES_0_USERNAME
              value: "{{ .Values.env.SQLMS_DATASOURCES_0_USERNAME }}"
            - name: SQLMS_DATASOURCES_0_PASSWORD
              value: "{{ .Values.env.SQLMS_DATASOURCES_0_PASSWORD }}"
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_BOOT
              value: "{{ .Values.env.LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_BOOT }}"
          ports:
            - containerPort: 8082
              name: http
          volumeMounts:
            - name: resql-volume
              mountPath: /DSL/
          # livenessProbe:
          #   httpGet:
          #     port: 8082
          #   initialDelaySeconds: 26
          #   periodSeconds: 11
          # readinessProbe:
          #   httpGet:
          #     port: 8082
          #   initialDelaySeconds: 25
          #   periodSeconds: 10
          resources:
            requests:
              memory: "{{ .Values.resources.requests.memory }}"
              cpu: "{{ .Values.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.resources.limits.memory }}"
              cpu: "{{ .Values.resources.limits.cpu }}"

      volumes:
        - name: resql-volume
          emptyDir: {}

